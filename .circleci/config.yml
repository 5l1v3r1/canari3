version: 2


# Anchors

## Docker images used for builds
py2-image: &py2-image
  docker:
    - image: circleci/python:2.7.15-stretch-node
  working_directory: ~/canari

py3-image: &py3-image
  docker:
    - image: circleci/python:3.6.6-stretch-node-browsers
  working_directory: ~/canari


## Docker build step
docker-build: &docker-build
  steps:
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: docker-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
    - run:
        name: Build Canari Docker Image
        command: |
          set +o pipefail
          set -x
          CANARI_VERSION=`python setup.py --version`
          DOCKER=`([[ "$BASH_ENV" == *localbuild* ]] && echo sudo docker || echo docker)`
          $DOCKER load -i ~/docker-cache/canari.tar | true
          $DOCKER build --cache-from=redcanari/canari:${CANARI_VERSION}-${TAG_SUFFIX} -f Dockerfile-${TAG_SUFFIX} . -t redcanari/canari:${CANARI_VERSION}-${TAG_SUFFIX}
          if [ "${TAG_SUFFIX}" == "alpine" ]; then
            $DOCKER tag redcanari/canari:${CANARI_VERSION}-${TAG_SUFFIX} redcanari/canari:latest
          fi;
          mkdir -p ~/docker-cache
          $DOCKER save -o ~/docker-cache/canari.tar redcanari/canari:${CANARI_VERSION}-${TAG_SUFFIX}
          if [ "${CIRCLE_BRANCH}" == "master" -a ! -z "${CIRCLE_TAG}" ]; then
            $DOCKER login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
            $DOCKER push redcanari/canari
          fi;
    - save_cache:
        key: docker-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
        paths:
          - ~/docker-cache/canari.tar


## Filters for workflow steps
filter-any: &filter-any
  filters:
    tags:
      only: /.*/

filter-deploy: &filter-deploy
  filters:
    tags:
      only: /v[0-9]+(\.[0-9]+)*/
    branches:
      ignore: /.*/


# Job Definitions
jobs:

  # Checkout code and cache
  checkout-code:
    docker:
      - image: circleci/python:2.7.15-stretch-node
      - image: circleci/python:3.6.6-stretch-node-browsers
    working_directory: ~/canari
    steps:
      - checkout
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/canari


  # Install requirements, run tests, and cache deps
  ## Run tests on python 2
  build-and-test-py2:
    <<: *py2-image
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: deps-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            set -x
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            set -x
            . venv/bin/activate
            python setup.py test


  ## Run tests on python 3
  build-and-test-py3:
    <<: *py3-image
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: deps-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            set -x
            virtualenv venv
            . venv/bin/activate
            pip3 install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            set -x
            . venv/bin/activate
            python3 setup.py test


  # Deployments
  ## Deploy to PyPi
  deploy-to-pypi:
    <<: *py2-image
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            set -x
            echo "[server-login]" > ~/.pypirc
            echo "repository:https://upload.pypi.org/legacy/" >> ~/.pypirc
            echo "username:$PYPI_USERNAME" >> ~/.pypirc
            echo "password:$PYPI_PASSWORD" >> ~/.pypirc
            python setup.py sdist upload


  ## Deploy AWS Lambda dependencies to GitHub Releases
  upload-lambda-deps:
    <<: *py2-image
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            set -x
            cd lambda
            CANARI_VERSION=`python setup.py --version`
            DOCKER=`([[ "$BASH_ENV" == *localbuild* ]] && echo sudo docker || echo docker)`
            $DOCKER build --build-arg GITHUB_API_TOKEN=${GITHUB_API_TOKEN} --build-arg CANARI_VERSION=${CANARI_VERSION} .


  # Fan out and build (and deploy) docker images in parallel
  ## Python 2 Dockers
  build-and-deploy-docker-alpine-py2:
    <<: *py2-image
    environment:
      TAG_SUFFIX: alpine
    <<: *docker-build

  build-and-deploy-docker-ubuntu-py2:
    <<: *py2-image
    environment:
      TAG_SUFFIX: ubuntu
    <<: *docker-build

  build-and-deploy-docker-kalilinux-py2:
    <<: *py2-image
    environment:
      TAG_SUFFIX: kalilinux
    <<: *docker-build


  ## Python 3 Dockers
  build-and-deploy-docker-alpine-py3:
    <<: *py3-image
    environment:
      TAG_SUFFIX: alpine-py3
    <<: *docker-build

  build-and-deploy-docker-ubuntu-py3:
    <<: *py3-image
    environment:
      TAG_SUFFIX: ubuntu-py3
    <<: *docker-build

  build-and-deploy-docker-kalilinux-py3:
    <<: *py3-image
    environment:
      TAG_SUFFIX: kalilinux-py3
    <<: *docker-build


# Workflows
workflows:
  version: 2
  build-and-test:
    jobs:
      # First step
      - checkout-code:
          <<: *filter-any

      # Fan out to py2/3 build and test
      - build-and-test-py2:
          requires:
            - checkout-code
          <<: *filter-any
      - build-and-test-py3:
          requires:
            - checkout-code
          <<: *filter-any

      # Fan out to docker builds py2
      - build-and-deploy-docker-alpine-py2:
          requires:
            - build-and-test-py2
          <<: *filter-any
      - build-and-deploy-docker-ubuntu-py2:
          requires:
            - build-and-test-py2
          <<: *filter-any
      - build-and-deploy-docker-kalilinux-py2:
          requires:
            - build-and-test-py2
          <<: *filter-any

      # Fan out to docker builds py3
      - build-and-deploy-docker-alpine-py3:
          requires:
            - build-and-test-py3
          <<: *filter-any
      - build-and-deploy-docker-ubuntu-py3:
          requires:
            - build-and-test-py3
          <<: *filter-any
      - build-and-deploy-docker-kalilinux-py3:
          requires:
            - build-and-test-py3
          <<: *filter-any

      - deploy-to-pypi:
          requires:
            - build-and-deploy-docker-alpine-py2
            - build-and-deploy-docker-ubuntu-py2
            - build-and-deploy-docker-kalilinux-py2
            - build-and-deploy-docker-alpine-py3
            - build-and-deploy-docker-ubuntu-py3
            - build-and-deploy-docker-kalilinux-py3
          <<: *filter-deploy

      - upload-lambda-deps:
          requires:
            - deploy-to-pypi
          <<: *filter-deploy
