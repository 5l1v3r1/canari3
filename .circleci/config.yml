version: 2

# Use sudo docker when localbuild test

# Anchors
py2-image: &py2-image
  docker:
    - image: circleci/python:2.7.15-stretch-node
  working_directory: ~/canari

py3-image: &py3-image
  docker:
    - image: circleci/python:3.6.6-stretch-node-browsers
  working_directory: ~/canari

docker-build: &docker-build
  steps:
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: docker-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
    - run:
        name: Build Canari Docker Image
        command: |
          set +o pipefail
          CANARI_VERSION=`python setup.py --version`
          DOCKER=`([[ "$BASH_ENV" == *localbuild* ]] && echo sudo docker || echo docker)`
          $DOCKER load -i /caches/canari.tar | true
          $DOCKER build --cache-from=canari -f Dockerfile-${TAG_SUFFIX} . -t redcanari/canari:${CANARI_VERSION}-${TAG_SUFFIX}
          mkdir -p /caches
          $DOCKER save -o /caches/canari.tar redcanari/canari:${CANARI_VERSION}-${TAG_SUFFIX}
          if [ "${CIRCLE_BRANCH}" == "master" -a ! -z "${CIRCLE_TAG}" ]; then
            $DOCKER login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
            $DOCKER push redcanari/canari
          fi;
    - save_cache:
        key: docker-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
        paths:
          - /caches/canari.tar


# Filters for workflow steps
filter-any: &filter-any
  filters:
    tags:
      only: /.*/

filter-deploy: &filter-deploy
  filters:
    branches:
      only: master
    tags:
      only: /v[0-9]+(\.[0-9]+)*/


jobs:
  checkout-code:
    docker:
      - image: circleci/python:2.7.15-stretch-node
      - image: circleci/python:3.6.6-stretch-node-browsers
    working_directory: ~/canari
    steps:
      - checkout
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/canari

  build-and-test-py2:
    <<: *py2-image
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: deps-py2-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps-py2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            . venv/bin/activate
            python setup.py test

  build-and-test-py3:
    <<: *py3-image
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: deps-py3-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            . venv/bin/activate
            pip3 install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps-py3-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            . venv/bin/activate
            python3 setup.py test

# Fan out and build docker images in parallel
# Python 2 Dockers
  build-docker-alpine-py2:
    <<: *py2-image
    environment:
      TAG_SUFFIX: alpine
    <<: *docker-build

  build-docker-ubuntu-py2:
    <<: *py2-image
    environment:
      TAG_SUFFIX: ubuntu
    <<: *docker-build

  build-docker-kalilinux-py2:
    <<: *py2-image
    environment:
      TAG_SUFFIX: kalilinux
    <<: *docker-build

# Python 3 Dockers
  build-docker-alpine-py3:
    <<: *py3-image
    environment:
      TAG_SUFFIX: alpine-py3
    <<: *docker-build

  build-docker-ubuntu-py3:
    <<: *py3-image
    environment:
      TAG_SUFFIX: ubuntu-py3
    <<: *docker-build

  build-docker-kalilinux-py3:
    <<: *py3-image
    environment:
      TAG_SUFFIX: kalilinux-py3
    <<: *docker-build

workflows:
  version: 2
  build-and-test:
    jobs:
#     First step
      - checkout-code:
          <<: *filter-any

#     Fan out to py2/3 build and test
      - build-and-test-py2:
          requires:
            - checkout-code
          <<: *filter-any
      - build-and-test-py3:
          requires:
            - checkout-code
          <<: *filter-any

#     Fan out to docker builds py2
      - build-docker-alpine-py2:
          requires:
            - build-and-test-py2
          <<: *filter-any
      - build-docker-ubuntu-py2:
          requires:
            - build-and-test-py2
          <<: *filter-any
      - build-docker-kalilinux-py2:
          requires:
            - build-and-test-py2
          <<: *filter-any

#     Fan out to docker builds py3
      - build-docker-alpine-py3:
          requires:
            - build-and-test-py3
          <<: *filter-any
      - build-docker-ubuntu-py3:
          requires:
            - build-and-test-py3
          <<: *filter-any
      - build-docker-kalilinux-py3:
          requires:
            - build-and-test-py3
          <<: *filter-any

#     Fan out to docker builds py2
      - push-docker-alpine-py2:
          requires:
            - build-docker-alpine-py2
          <<: *filter-deploy
      - push-docker-ubuntu-py2:
          requires:
            - build-docker-ubuntu-py2
          <<: *filter-deploy
      - push-docker-kalilinux-py2:
          requires:
            - build-docker-kalilinux-py2
          <<: *filter-deploy

#     Fan out to docker builds py3
      - push-docker-alpine-py3:
          requires:
            - build-docker-alpine-py3
          <<: *filter-deploy
      - push-docker-ubuntu-py3:
          requires:
            - build-docker-ubuntu-py3
          <<: *filter-deploy
      - push-docker-kalilinux-py3:
          requires:
            - build-docker-kalilinux-py3
          <<: *filter-deploy

      - deploy-to-pypi:
          requires:
            - push-docker-alpine-py2
            - push-docker-ubuntu-py2
            - push-docker-kalilinux-py2
            - push-docker-alpine-py3
            - push-docker-ubuntu-py3
            - push-docker-kalilinux-py3
          <<: *filter-deploy

      - upload-lambda-deps:
          requires:
            - deploy-to-pypi
          <<: *filter-deploy
